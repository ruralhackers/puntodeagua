---
description: describes how the domain is structured
globs: packages/**
alwaysApply: false
---
# Organization
- this is code that follows domain driven design principles together with a ports and adapters structure
- it is structured in bounded context which live inside packages/<bounded-context>
- does not use getters and setters in classes

## Domain
- usually has the following folders
  - packages/domain/entities
  - packages/domain/valueObjects
  - packages/domain/repositories
  - packages/domain/services
  - packages/domain/events


## Services
- both application and domain services should have a single responsibility
- services will always be started with a public run method


### Domain Services
- live in packages/<bounded-context>/domain/services/
- represent domain concepts and operations
- contain pure business logic
- express domain rules that don't fit in entities/value objects


### Application Services
- live in packages/<bounded-context>/application/<entity>/
- represent complete use cases
- orchestrate domain objects
- handle technical concerns like transactions
- coordinate multiple domain services/entities

## Infrastructure


