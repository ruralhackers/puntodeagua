// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  roles         String[]  @default([]) // e.g., ['ADMIN', 'USER']
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  communityId String?    @map("community_id")
  community   Community? @relation(fields: [communityId], references: [id])

  accounts Account[]
  sessions Session[]

  @@index([communityId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id             String @id @default(cuid())
  name           String
  waterLimitRule Json   @map("water_limit_rule")

  users         User[]
  zones         CommunityZone[]
  waterDeposits WaterDeposit[]
  analyses      Analysis[]
  incidents     Incident[]
}

model CommunityZone {
  id   String @id @default(cuid())
  name String

  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map("community_id")

  notes      String       @default("") @db.Text
  WaterPoint WaterPoint[]
  analyses   Analysis[]
  incidents  Incident[]

  @@index([communityId])
}

model WaterDeposit {
  id       String @id @default(cuid())
  name     String
  location String @default("")

  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map("community_id")

  notes     String     @default("") @db.Text
  analyses  Analysis[]
  incidents Incident[]

  @@index([communityId])
}

model WaterPoint {
  id       String @id @default(cuid())
  name     String
  location String @default("")

  notes String @default("") @db.Text

  fixedPopulation    Int    @default(0) @map("fixed_population")
  floatingPopulation Int    @default(0) @map("floating_population")
  cadastralReference String @map("cadastral_reference")

  communityZone   CommunityZone @relation(fields: [communityZoneId], references: [id])
  communityZoneId String        @map("community_zone_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  waterMeters WaterMeter[]
  incidents   Incident[]

  @@index([communityZoneId])
}

model WaterAccount {
  id         String @id @default(cuid())
  name       String
  nationalId String @map("national_id")

  notes String @default("") @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  waterMeters WaterMeter[]
}

model WaterMeter {
  id   String @id @default(cuid())
  name String

  waterAccount   WaterAccount @relation(fields: [waterAccountId], references: [id])
  waterAccountId String       @map("water_account_id")

  waterPoint   WaterPoint @relation(fields: [waterPointId], references: [id], onDelete: Cascade)
  waterPointId String     @map("water_point_id")

  measurementUnit              String
  lastReadingNormalizedValue   Int?      @map("last_reading_normalized_value")
  lastReadingDate              DateTime? @map("last_reading_date")
  lastReadingExcessConsumption Boolean?  @map("last_reading_excess_consumption")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  waterMeterReadings WaterMeterReading[]

  @@index([waterAccountId])
  @@index([waterPointId])
}

model WaterMeterReading {
  id String @id @default(cuid())

  waterMeter   WaterMeter @relation(fields: [waterMeterId], references: [id], onDelete: Cascade)
  waterMeterId String     @map("water_meter_id")

  reading           Decimal  @db.Decimal(10, 3)
  normalizedReading Int      @map("normalized_reading")
  readingDate       DateTime
  notes             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([waterMeterId])
}

model Analysis {
  id String @id @default(cuid())

  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map("community_id")

  analysisType String
  analyst      String
  analyzedAt   DateTime

  waterZoneId    String?        @map("water_zone_id")
  waterZone      CommunityZone? @relation(fields: [waterZoneId], references: [id])
  waterDepositId String?        @map("water_deposit_id")
  waterDeposit   WaterDeposit?  @relation(fields: [waterDepositId], references: [id])

  ph          String?
  turbidity   String?
  chlorine    String?
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
  @@index([waterZoneId])
  @@index([waterDepositId])
}

model Incident {
  id String @id @default(cuid())

  community      Community      @relation(fields: [communityId], references: [id])
  communityId    String         @map("community_id")
  waterZoneId    String?        @map("water_zone_id")
  waterZone      CommunityZone? @relation(fields: [waterZoneId], references: [id])
  waterDepositId String?        @map("water_deposit_id")
  waterDeposit   WaterDeposit?  @relation(fields: [waterDepositId], references: [id])
  waterPointId   String?        @map("water_point_id")
  waterPoint     WaterPoint?    @relation(fields: [waterPointId], references: [id])

  title        String
  description  String?
  reporterName String

  status  String
  startAt DateTime
  endAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
  @@index([waterZoneId])
  @@index([waterDepositId])
  @@index([waterPointId])
}
