// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  roles         String[]  @default([]) // e.g., ['ADMIN', 'USER']
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  communityId String?    @map("community_id")
  community   Community? @relation(fields: [communityId], references: [id])

  accounts Account[]
  sessions Session[]

  @@index([communityId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id   String @id @default(cuid())
  name String

  communities Community[]
}

model Community {
  id   String @id @default(cuid())
  name String

  waterLimitRule Json @map("water_limit_rule")

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @map("plan_id")

  users User[]

  @@index([planId])
}
